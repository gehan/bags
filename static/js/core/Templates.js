// Generated by CoffeeScript 1.3.1
/*
Class to allow convenient rendering of mustache templates
Ideally used as a mixin to add this ability to classes but can be used as a standalone
*/

var Templates;

Templates = new Class({
  TEMPLATES: {},
  refs: {},
  el: null,
  events: {},
  loadAllTemplates: function() {
    var k, v, _i, _len, _ref, _ref1, _results;
    _ref = this.TEMPLATES;
    for (k in _ref) {
      v = _ref[k];
      this._loadTemplate(k);
    }
    _ref1 = $$('script[type=text/html]').get('template');
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      k = _ref1[_i];
      _results.push(this._loadTemplate(k));
    }
    return _results;
  },
  renderTemplate: function(templateName, data, events) {
    var els, rendered;
    if (data == null) {
      data = {};
    }
    if (events == null) {
      events = null;
    }
    Timer.start('render');
    rendered = this._renderDustTemplate(templateName, data);
    Timer.add('render');
    Timer.start('elementsFrom');
    els = Elements.from(rendered);
    Timer.add('elementsFrom');
    if (events != null) {
      this.addChildEvents(els, events);
    }
    if (els.length === 1) {
      return els[0];
    } else {
      return els;
    }
  },
  addChildEvents: function(els, events) {
    var el, eventKey, eventType, fn, parent, selector, _ref, _ref1, _results;
    if (events == null) {
      events = {};
    }
    if ((_ref = typeOf(els)) === 'array' || _ref === 'elements') {
      el = els[0];
    } else {
      el = els;
    }
    parent = el.getParent();
    _results = [];
    for (eventKey in events) {
      fn = events[eventKey];
      _ref1 = eventKey.split(':'), eventType = _ref1[0], selector = _ref1[1];
      _results.push(parent.getElements(selector).addEvent(eventType, fn));
    }
    return _results;
  },
  initDelegatedEvents: function() {
    var boundFn, eventKey, fnName, _ref, _results;
    if (!(this.childEventContainer != null)) {
      throw "Must define childEventContainer to delegate events";
    }
    _ref = this.childEvents;
    _results = [];
    for (eventKey in _ref) {
      fnName = _ref[eventKey];
      boundFn = function(fnName, event, target) {
        var childObj, fn, rootEl;
        if (target.hasClass('el-root')) {
          rootEl = target;
        } else {
          rootEl = target.getParent('.el-root');
        }
        if (!(rootEl != null)) {
          return;
        }
        childObj = rootEl.retrieve('obj');
        if (target.get('tag') === 'a') {
          event.preventDefault();
        }
        fn = childObj[fnName];
        return fn.call(childObj, event, target);
      };
      boundFn = boundFn.bind(this, fnName);
      _results.push(this.childEventContainer.addDelegatedEvent(eventKey, boundFn));
    }
    return _results;
  },
  initEvents: function(el) {
    var boundFn, eventKey, fnName, _ref, _results;
    if (el == null) {
      el = this.el;
    }
    _ref = this.events;
    _results = [];
    for (eventKey in _ref) {
      fnName = _ref[eventKey];
      boundFn = function(fnName, event, target) {
        event.preventDefault();
        return this[fnName](event, target);
      };
      boundFn = boundFn.bind(this, fnName);
      _results.push(el.addDelegatedEvent(eventKey, boundFn));
    }
    return _results;
  },
  getRefs: function(els, ref) {
    var el, elRefName, refEl, refName, refs, _i, _j, _len, _len1, _ref, _ref1;
    if (ref == null) {
      ref = null;
    }
    Timer.start('getRefs');
    refs = {};
    _ref = Array.from(els);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      el = _ref[_i];
      elRefName = el.get('ref');
      if (ref && elRefName === ref) {
        return el;
      }
      if (elRefName) {
        refs[elRefName] = el;
      }
      _ref1 = el.getElements("*[ref]");
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        refEl = _ref1[_j];
        refName = refEl.get('ref');
        if (ref && refName === ref) {
          return el;
        }
        refs[refName] = refEl;
        if (refName === 'fbTag') {
          FBParse.queue(refs.fbTag);
        }
      }
    }
    Timer.add('getRefs');
    return refs;
  },
  getRef: function(el, ref) {
    return this.getRefs(el, ref);
  },
  render: function(data, template) {
    var el;
    if (data == null) {
      data = {};
    }
    if (template == null) {
      template = this.template;
    }
    el = this.renderTemplate(template, data);
    if (this.el) {
      el.replaces(this.el);
    }
    this.el = el;
    Object.merge(this.refs, this.getRefs(el));
    el.store('obj', this);
    this.initEvents(el);
    this.fireEvent('render');
    return el;
  },
  rerender: function(refs, data, template) {
    var el,
      _this = this;
    if (template == null) {
      template = this.template;
    }
    el = this.renderTemplate(template, data);
    Array.from(refs).each(function(ref) {
      var newEl, replaceThis;
      replaceThis = _this.refs[ref];
      if (!replaceThis) {
        throw "Cannot find ref " + ref + " in template " + template;
      }
      newEl = _this.getRefs(el)[ref];
      Object.merge(_this.refs, _this.getRefs(newEl));
      return _this.refs[ref].replaces(replaceThis);
    });
    return el;
  },
  _renderDustTemplate: function(templateName, data) {
    var rendered;
    if (data == null) {
      data = {};
    }
    this._loadTemplate(templateName);
    data = Object.clone(data);
    data["let"] = data || 0;
    rendered = "";
    dust.render(templateName, data, function(err, out) {
      return rendered = out;
    });
    return rendered;
  },
  _loadTemplate: function(templateName) {
    var compiled;
    if (!(dust.cache[templateName] != null)) {
      compiled = dust.compile(this.getTemplate(templateName), templateName);
      return dust.loadSource(compiled);
    }
  },
  getTemplate: function(templateName) {
    var template;
    if (this.TEMPLATES != null) {
      template = this.TEMPLATES[templateName];
    }
    if (template != null) {
      return template;
    }
    template = document.getElement("script[template=" + templateName + "]");
    if (template != null) {
      return template.get('html');
    }
    throw "Cannot find template " + templateName;
  },
  toElement: function() {
    return this.el;
  }
});
