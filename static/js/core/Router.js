// Generated by CoffeeScript 1.3.1
var Router;

Router = new Class({
  Binds: ['startRoute'],
  Implements: [Options, Events],
  _replaceRegex: {
    "([^\/]+)": /\:\w+/g,
    "(.*)": /\*\w+/g
  },
  _parsedRoutes: [],
  routes: {},
  initialize: function(options) {
    this.setOptions(options);
    this._parseRoutes();
    return this;
  },
  attach: function() {
    return window.addEvent('statechange', this.startRoute);
  },
  startRoute: function() {
    var data, path, uri;
    uri = this.parseURI();
    path = uri.get('directory') + uri.get('file');
    data = uri.getData();
    return this.findRoute(path);
  },
  _parseRoutes: function(routes) {
    var funcName, route, routeRegEx, _results;
    if (routes == null) {
      routes = this.routes;
    }
    _results = [];
    for (route in routes) {
      funcName = routes[route];
      routeRegEx = this._createRouteRegex(route);
      _results.push(this._parsedRoutes.push([routeRegEx, funcName]));
    }
    return _results;
  },
  _createRouteRegex: function(route) {
    var findRe, replaceWith, _ref;
    _ref = this._replaceRegex;
    for (replaceWith in _ref) {
      findRe = _ref[replaceWith];
      route = route.replace(findRe, replaceWith);
    }
    return new RegExp(route + '$');
  },
  parseURI: function() {
    var path;
    path = History.getState().hash;
    if (path.substr(0, 1) === '/') {
      path = path.substr(1);
    }
    return new URI(path);
  },
  findRoute: function(path) {
    var args, funcName, match, regEx, _i, _len, _ref, _ref1;
    _ref = this._parsedRoutes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      _ref1 = _ref[_i], regEx = _ref1[0], funcName = _ref1[1];
      match = regEx.exec(path);
      if (match != null) {
        args = match.slice(1);
        if (match != null) {
          return this[funcName].apply(this, args);
        }
      }
    }
  },
  destroy: function() {
    return window.removeEvent('statechange', this.startRoute);
  }
});
