// Generated by CoffeeScript 1.3.1

(function() {
  var reCombine, reParam, reSplat;
  reParam = "\\:(\\w+)";
  reSplat = "\\*(\\w+)";
  reCombine = new RegExp("" + reParam + "|" + reSplat, 'g');
  return window.Router = new Class({
    Binds: ['startRoute'],
    Implements: [Options, Events],
    _replaceRegex: {
      "([^\/]+)": new RegExp(reParam, 'g'),
      "(.*)": new RegExp(reSplat, 'g')
    },
    routes: {},
    _parsedRoutes: [],
    subRouter: null,
    viewClass: null,
    options: {
      el: null
    },
    initialize: function(options) {
      this.setOptions(options);
      this._parseRoutes();
      if (this.viewClass) {
        this._initView();
      }
      return this;
    },
    attach: function() {
      window.addEvent('statechange', this.startRoute);
      return this;
    },
    detach: function() {
      return window.removeEvent('statechange', this.startRoute);
    },
    startRoute: function(path, data) {
      var uri;
      uri = this.parseURI();
      if (!(path != null)) {
        path = uri.get('directory') + uri.get('file');
      }
      if (!(data != null)) {
        data = uri.getData();
      }
      return this.findRoute(path, data);
    },
    _parseRoutes: function(routes) {
      var funcName, paramNames, route, routeRegEx, _results;
      if (routes == null) {
        routes = this.routes;
      }
      _results = [];
      for (route in routes) {
        funcName = routes[route];
        routeRegEx = this._createRouteRegex(route);
        paramNames = this._extractParamPositions(route);
        _results.push(this._parsedRoutes.push([routeRegEx, funcName, paramNames]));
      }
      return _results;
    },
    _createRouteRegex: function(route) {
      var findRe, replaceWith, _ref;
      _ref = this._replaceRegex;
      for (replaceWith in _ref) {
        findRe = _ref[replaceWith];
        route = route.replace(findRe, replaceWith);
      }
      return new RegExp("^" + route + '$');
    },
    _extractParamPositions: function(route) {
      var params, s;
      params = [];
      while ((s = reCombine.exec(route))) {
        params.push(s.slice(1).erase('').pick());
      }
      return params;
    },
    parseURI: function() {
      var path;
      path = History.getState().hash;
      if (path.substr(0, 1) !== '/') {
        path = "/" + path;
      }
      return new URI(path);
    },
    findRoute: function(path, data) {
      var args, funcName, match, paramNames, regEx, routerClass, _i, _len, _ref, _ref1;
      if (path.substr(0, 1) === '/') {
        path = path.substr(1);
      }
      _ref = this._parsedRoutes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], regEx = _ref1[0], funcName = _ref1[1], paramNames = _ref1[2];
        match = regEx.exec(path);
        if (match != null) {
          args = match.slice(1).associate(paramNames);
          if (typeOf(funcName) === 'function') {
            routerClass = funcName();
            return this.subRoute(routerClass, args, data, {
              el: this.subRouteEl()
            });
          } else {
            args = [args];
            args.push(data);
            if (match != null) {
              return this[funcName].apply(this, args);
            }
          }
        }
      }
    },
    subRoute: function(routerClass, args, data, options) {
      var path;
      if (!instanceOf(this.subRouter, routerClass)) {
        if (this.subRouter != null) {
          this.subRouter.destroy();
        }
        this.subRouter = new routerClass(options);
      }
      if (Object.getLength(args) !== 1) {
        throw "Bad subroute, include one splat only";
      }
      path = Object.values(args)[0];
      return this.subRouter.startRoute(path);
    },
    _initView: function() {
      if (!instanceOf(this.view, this.viewClass)) {
        if (!(this.options.el != null)) {
          throw "Cannot init view, no el specified";
        }
        this._destroyView();
        this.view = new this.viewClass();
        return this.view.inject(this.options.el);
      }
    },
    _destroyView: function() {
      if (this.view != null) {
        this.view.destroy();
      }
      return this.options.el.empty();
    },
    initSubView: function(viewClass, el) {
      if (!instanceOf(this.subView, viewClass)) {
        if (!(el != null)) {
          throw "Cannot init sub view, no el passed in";
        }
        if (this.subView != null) {
          this.subView.destroy();
        }
        this.subView = new viewClass();
        return this.subView.inject(el);
      }
    },
    destroy: function() {
      this._destroyView();
      return this.detach();
    }
  });
})();
